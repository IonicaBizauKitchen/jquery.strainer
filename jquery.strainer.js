// Generated by CoffeeScript 1.4.0
(function() {

  String.prototype.looselyContains = function(substring, delimiter, strict) {
    var word, words, _i, _j, _k, _len, _len1, _len2, _ref;
    if (delimiter == null) {
      delimiter = " ";
    }
    if (strict == null) {
      strict = true;
    }
    words = [];
    _ref = substring.split(delimiter);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      word = _ref[_i];
      if (word !== "") {
        words.push(word);
      }
    }
    if (strict) {
      for (_j = 0, _len1 = words.length; _j < _len1; _j++) {
        word = words[_j];
        if (!(this.search(new RegExp(word, "i")) > -1)) {
          return false;
        }
      }
      return true;
    } else {
      for (_k = 0, _len2 = words.length; _k < _len2; _k++) {
        word = words[_k];
        if (this.search(new RegExp(word, "i")) > -1) {
          return true;
        }
      }
      return false;
    }
  };

  jQuery.fn.strainer = function(options) {
    var _this = this;
    if (options == null) {
      options = {};
    }
    if (this.length < 1) {
      return;
    }
    if ($(options.selector).length < 1) {
      return;
    }
    this.data('selector', $(options.selector));
    this.data('minChars', options.minChars || 1);
    this.data('onStrain', options.onStrain);
    this.data('mode', options.mode || 'reductive');
    if (this.data('mode') === 'reductive') {
      this.data('selector').addClass('match');
    } else {
      this.data('selector').removeClass('match');
    }
    return this.keyup(function(event) {
      var q;
      q = _this.val();
      if (q.length < _this.data('minChars')) {
        if (_this.data('mode') === 'reductive') {
          _this.data('selector').addClass('match');
        } else {
          _this.data('selector').removeClass('match');
        }
      } else {
        _this.data('selector').each(function() {
          var match, matching_words, word, words, _i, _len;
          words = q.split(' ');
          matching_words = [];
          for (_i = 0, _len = words.length; _i < _len; _i++) {
            word = words[_i];
            match = word.match(/(\w+):([\w,]+)/);
            if (match && $(this).data(match[1]) && $(this).data(match[1]).looselyContains(match[2], ",", false)) {
              matching_words.push(word);
            } else if ($(this).text().looselyContains(word)) {
              matching_words.push(word);
            }
          }
          return $(this).toggleClass('match', matching_words.length === words.length);
        });
      }
      if (_this.data('onStrain') != null) {
        return _this.data('onStrain')(_this.data('selector').filter('.match'));
      }
    });
  };

}).call(this);
